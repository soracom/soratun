// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination internal/mock/client.go
//

// Package mock_soratun is a generated GoMock package.
package mock_soratun

import (
	reflect "reflect"

	soratun "github.com/soracom/soratun"
	gomock "go.uber.org/mock/gomock"
)

// MockSoracomClient is a mock of SoracomClient interface.
type MockSoracomClient struct {
	ctrl     *gomock.Controller
	recorder *MockSoracomClientMockRecorder
}

// MockSoracomClientMockRecorder is the mock recorder for MockSoracomClient.
type MockSoracomClientMockRecorder struct {
	mock *MockSoracomClient
}

// NewMockSoracomClient creates a new mock instance.
func NewMockSoracomClient(ctrl *gomock.Controller) *MockSoracomClient {
	mock := &MockSoracomClient{ctrl: ctrl}
	mock.recorder = &MockSoracomClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSoracomClient) EXPECT() *MockSoracomClientMockRecorder {
	return m.recorder
}

// CreateArcSession mocks base method.
func (m *MockSoracomClient) CreateArcSession(simId, publicKey string) (*soratun.ArcSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArcSession", simId, publicKey)
	ret0, _ := ret[0].(*soratun.ArcSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArcSession indicates an expected call of CreateArcSession.
func (mr *MockSoracomClientMockRecorder) CreateArcSession(simId, publicKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArcSession", reflect.TypeOf((*MockSoracomClient)(nil).CreateArcSession), simId, publicKey)
}

// CreateVirtualSim mocks base method.
func (m *MockSoracomClient) CreateVirtualSim() (*soratun.VirtualSim, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVirtualSim")
	ret0, _ := ret[0].(*soratun.VirtualSim)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVirtualSim indicates an expected call of CreateVirtualSim.
func (mr *MockSoracomClientMockRecorder) CreateVirtualSim() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVirtualSim", reflect.TypeOf((*MockSoracomClient)(nil).CreateVirtualSim))
}

// SetVerbose mocks base method.
func (m *MockSoracomClient) SetVerbose(v bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVerbose", v)
}

// SetVerbose indicates an expected call of SetVerbose.
func (mr *MockSoracomClientMockRecorder) SetVerbose(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVerbose", reflect.TypeOf((*MockSoracomClient)(nil).SetVerbose), v)
}

// Verbose mocks base method.
func (m *MockSoracomClient) Verbose() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verbose")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Verbose indicates an expected call of Verbose.
func (mr *MockSoracomClientMockRecorder) Verbose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verbose", reflect.TypeOf((*MockSoracomClient)(nil).Verbose))
}
